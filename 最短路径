----------------------------最短路径（重边要考虑！！！）-----------------------------------
最短路径---dijkstra

int distance[1005][1005],visit[1005]={ 0 };
void dijkstra(int node,int n) {
	int i, j;
	int min, pos = 0;
	visit[node] = 1;
	for (i = 0; i < n; i++) {
		min = MAXN;
		for (j = 0; j < n; j++) {
			if (min > distance[node][j]&&visit[j]==0) {
				min = distance[node][j];
				pos = j;
			}
		}
		visit[pos] = 1;
		for (j = 0; j < n; j++) {
			if (visit[j] == 0 && distance[node][j] > distance[node][pos] + distance[pos][j]) {
				distance[node][j] = distance[node][pos] + distance[pos][j];
			}
		}
	}
	for (i = 0; i < n; i++) {
		visit[i] = 0;
	}
}

最短路径----floyd算法

void init(int n) {
	int i, j;
	for (i = 0; i < n; i++) {
		for (j = 0; j < n; j++) {
			path[i][j] = j;
			distance[i][j] = MAXN;
		}
		distance[i][i] = 0;
	}
}

void floyd(int n) {
	int i, j, k;
	for (k = 0; k < n; k++) {
		for (i = 0; i < n; i++) {
			for (j = 0; j < n; j++) {
				if (distance[i][j] > distance[i][k] + distance[k][j] + value[k]) {
					distance[i][j] = distance[i][k] + distance[k][j] + value[k];
					path[i][j] = path[i][k];
				}
			}
		}
	}
}
欲求路径数最小，需增加距离相等时的路径判断。
